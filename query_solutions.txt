1. Selezionare tutti gli eventi gratis, cioè con prezzo nullo (19)
    SELECT * 
    FROM `events`
    WHERE `price` IS NULL;

2. Selezionare tutte le location in ordine alfabetico (82)
    SELECT * 
    FROM `locations`
    ORDER BY `name` ASC;

3. Selezionare tutti gli eventi che costano meno di 20 euro e durano meno di 3 ore (38)
    SELECT * FROM `events`
    WHERE `price` < 20 
    AND TIME_TO_SEC(`duration`) < 10800;

4. Selezionare tutti gli eventi di dicembre 2023 (25)
    SELECT * FROM `events`
    WHERE `start` >= '2023-12-01 00:00:00'
    AND `start` < '2024-01-01 00:00:00';

5. Selezionare tutti gli eventi con una durata maggiore alle 2 ore (823)
    SELECT * FROM `events`
    WHERE TIME_TO_SEC(`duration`) > 7200;

6. Selezionare tutti gli eventi, mostrando nome, data di inizio, ora di inizio, ora di fine e durata totale (1040)
    SELECT 
        `name`,
        DATE(`start`) AS `data_inizio`,
        TIME(`start`) AS `ora_inizio`,
        TIME(ADDTIME(`start`, `duration`)) AS `ora_fine`,
        `duration` AS `durata_totale`
    FROM `events`;

7. Selezionare tutti gli eventi aggiunti da “Fabiano Lombardo” (id: 1202) (132)
    SELECT * FROM `events`
    WHERE `user_id` = '1202';

8. Selezionare il numero totale di eventi per ogni fascia di prezzo (81)
    SELECT COUNT(price) FROM `events` 
    GROUP BY `price`;

9. Selezionare tutti gli utenti admin ed editor (9)
    SELECT * FROM `users`
    WHERE `role_id` < 3;

10. Selezionare tutti i concerti (eventi con il tag “concerti”) (72)
    SELECT * FROM `event_tag`
    WHERE `tag_id` = 1;

11. Selezionare tutti i tag e il prezzo medio degli eventi a loro collegati (11)
    SELECT * FROM `events` 
    JOIN `tags` 
    ON `events`.`id` = `tags`.`id` 
    WHERE (SELECT AVG(`price`) FROM `events`);

12. Selezionare tutte le location e mostrare quanti eventi si sono tenute in ognuna di esse (82)
    SELECT `locations`.`id`, `locations`.`name`, 
    COUNT(`events`.`id`) AS event_count 
    FROM `locations` 
    LEFT JOIN `events` 
    ON `locations`.`id` = `events`.`location_id` 
    GROUP BY `locations`.`id`, `locations`.`name`;

13. Selezionare tutti i partecipanti per l’evento “Concerto Classico Serale” (slug: concerto-classico-serale, id: 34) (30)
    SELECT `user_id` AS participant_id 
    FROM `bookings` 
    WHERE `event_id` = 34;

14. Selezionare tutti i partecipanti all’evento “Festival Jazz Estivo” (slug: festival-jazz-estivo, id: 2) specificando nome e cognome (13)
    SELECT `first_name` AS nome, `last_name` AS cognome 
    FROM `users` 
    JOIN `bookings` 
    ON `users`.`id` = `bookings`.`id`
    WHERE `event_id` = 2;

15. Selezionare tutti gli eventi sold out (dove il totale delle prenotazioni è uguale ai biglietti totali per l’evento) (18)
    SELECT * FROM events 
    WHERE total_tickets = (SELECT COUNT(*) FROM bookings WHERE event_id = events.id);

16. Selezionare tutte le location in ordine per chi ha ospitato più eventi (82)
    SELECT locations.name, COUNT(*) as num_events FROM locations
    JOIN events ON locations.id = events.location_id
    GROUP BY locations.name
    ORDER BY num_events DESC;


17. Selezionare tutti gli utenti che si sono prenotati a più di 70 eventi (74)
    SELECT `users`.`id`, `users`.`first_name`,
    COUNT(`bookings`.`event_id`) AS event_count 
    FROM `users` 
    JOIN `bookings` ON `users`.`id` = `bookings`.`user_id` 
    GROUP BY `users`.`id`, `users`.`first_name` 
    HAVING event_count > 70;

18. Selezionare tutti gli eventi, mostrando il nome dell’evento, il nome della location, il numero di prenotazioni e il totale di biglietti ancora disponibili per l’evento (1040)
    SELECT `events`.`name` AS 'event_name', `locations`.`name` AS 'location_name',
    COUNT(`bookings`.`event_id`) AS 'number_of_bookings', `events`.`total_tickets` - COUNT(`bookings`.`event_id`) AS 'remaining_tickets' 
    FROM `locations`
    INNER JOIN `events`
        ON `locations`.`id`= `events`.`location_id`
    INNER JOIN `bookings`
        ON `events`.`id` = `bookings`.`event_id`
    GROUP BY `bookings`.`event_id`;